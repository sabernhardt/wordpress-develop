##
# A reusable workflow that checks the PHP coding standards.
##
name: PHP coding standards

on:
  workflow_call:
    inputs:
      php-version:
        description: 'The PHP version to use.'
        required: false
        type: 'string'
        default: 'latest'

jobs:
  # Runs the PHP coding standards checks.
  #
  # Violations are reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up PHP.
  # - Configures caching for PHPCS scans.
  # - Installs Composer dependencies.
  # - Make Composer packages available globally.
  # - Runs PHPCS on the full codebase (warnings excluded).
  # - Generate a report for displaying issues as pull request annotations.
  # - Runs PHPCS on the `tests` directory without (warnings included).
  # - Generate a report for displaying `test` directory issues as pull request annotations.
  # - Ensures version-controlled files are not modified or deleted.
  phpcs:
    name: Run coding standards checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          show-progress: ${{ runner.debug == '1' && 'true' || 'false' }}

      - name: Set up PHP
        uses: shivammathur/setup-php@a4e22b60bbb9c1021113f2860347b0759f66fe5d # v2.30.0
        with:
          php-version: ${{ inputs.php-version }}
          coverage: none
          tools: cs2pr

      # This date is used to ensure that the PHPCS cache is cleared at least once every week.
      # http://man7.org/linux/man-pages/man1/date.1.html
      - name: "Get last Monday's date"
        id: get-date
        run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> $GITHUB_OUTPUT

      - name: Cache PHPCS scan cache
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        with:
          path: |
            .cache/phpcs-src.json
            .cache/phpcs-tests.json
          key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-php-${{ inputs.php-version }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}

      # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
      # passing a custom cache suffix ensures that the cache is flushed at least once per week.
      - name: Install Composer dependencies
        uses: ramsey/composer-install@57532f8be5bda426838819c5ee9afb8af389d51a # v3.0.0
        with:
          custom-cache-suffix: ${{ steps.get-date.outputs.date }}

      - name: Make Composer packages available globally
        run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

      - name: Run PHPCS on all Core files
        id: phpcs-core
        run: phpcs -n --report-full --cache=./.cache/phpcs-src.json --report-checkstyle=./.cache/phpcs-report.xml

      - name: Show PHPCS results in PR
        if: ${{ always() && steps.phpcs-core.outcome == 'failure' }}
        run: cs2pr ./.cache/phpcs-report.xml

      - name: Check test suite files for warnings
        id: phpcs-tests
        run: phpcs tests --report-full --cache=./.cache/phpcs-tests.json --report-checkstyle=./.cache/phpcs-tests-report.xml

      - name: Show test suite scan results in PR
        if: ${{ always() && steps.phpcs-tests.outcome == 'failure' }}
        run: cs2pr ./.cache/phpcs-tests-report.xml

      - name: Ensure version-controlled files are not modified during the tests
        run: git diff --exit-code
